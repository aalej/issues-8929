"""
✨ `Movie_KeyOutput` returns the primary key fields of table type `Movie`.

It has the same format as `Movie_Key`, but is only used as mutation return value.
"""
scalar Movie_KeyOutput
"""
✨ Generated filter input type for table 'Language'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Language_Filter {
  """
  Match if field is exactly equal to provided value.
  """
  eq: Language
  """
  Match if field is not equal to provided value.
  """
  ne: Language
  """
  When true, match if field `IS NULL`. When false, match if field is `NOT NULL`.
  """
  isNull: Boolean
  """
  Match if field value is among the provided list of values.
  """
  in: [Language!]
  """
  Match if field value is not among the provided list of values.
  """
  nin: [Language!]
  """
  Match if field value is greater than the provided value, based on index ordering of supported enum values.
  """
  gt: Language
  """
  Match if field is greater than or equal to the provided value.
  """
  ge: Language
  """
  Match if field value is less than the provided value, based on index ordering of supported enum values.
  """
  lt: Language
  """
  Match if field is less than or equal to the provided value, based on index ordering of supported enum values.
  """
  le: Language
}
"""
✨ Generated list filter input type for table 'Language'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Language_ListFilter {
  """
  Match if list field contains the provided value as a member.
  """
  includes: Language
  """
  Match if list field contains all of the provided values as members.
  """
  includesAll: [Language!]
  """
  Match if list field does not contain the provided value as a member.
  """
  excludes: Language
  """
  Match if list field does not contain any of the provided values as members.
  """
  excludesAll: [Language!]
  """
  The desired number of enum values that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Language_Filter
}
"""
✨ Generated data input type for table 'Movie'. It includes all necessary fields for creating or upserting rows into table.
"""
input Movie_Data {
  """
  ✨ Generated from Field `Movie`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Movie`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Movie`.`availableLanguages` of type `[Language!]`
  """
  availableLanguages: [Language!]
  """
  ✨ Generated from Field `Movie`.`description` of type `String`
  """
  description: String
  """
  ✨ `_expr` server value variant of `description` (✨ Generated from Field `Movie`.`description` of type `String`)
  """
  description_expr: String_Expr
  """
  ✨ Generated from Field `Movie`.`genre` of type `String`
  """
  genre: String
  """
  ✨ `_expr` server value variant of `genre` (✨ Generated from Field `Movie`.`genre` of type `String`)
  """
  genre_expr: String_Expr
  """
  ✨ Generated from Field `Movie`.`originalLanguage` of type `Language!`
  """
  originalLanguage: Language
  """
  ✨ Generated from Field `Movie`.`title` of type `String!`
  """
  title: String
  """
  ✨ `_expr` server value variant of `title` (✨ Generated from Field `Movie`.`title` of type `String!`)
  """
  title_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Movie'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Movie_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Movie_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Movie_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Movie_Filter!]
  """
  ✨ Generated from Field `Movie`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Movie`.`availableLanguages` of type `[Language!]`
  """
  availableLanguages: Language_ListFilter
  """
  ✨ Generated from Field `Movie`.`description` of type `String`
  """
  description: String_Filter
  """
  ✨ Generated from Field `Movie`.`genre` of type `String`
  """
  genre: String_Filter
  """
  ✨ Generated from Field `Movie`.`originalLanguage` of type `Language!`
  """
  originalLanguage: Language_Filter
  """
  ✨ Generated from Field `Movie`.`title` of type `String!`
  """
  title: String_Filter
}
"""
✨ Generated first-row input type for table 'Movie'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Movie_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Movie_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Movie_Filter
}
"""
✨ Generated having input type for table 'Movie'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Movie_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [Movie_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: Movie_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [Movie_Having!]
  """
  ✨ Generated from Field `Movie`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`description_count` of type `Int!`
  """
  description_count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`genre_count` of type `Int!`
  """
  genre_count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`originalLanguage_count` of type `Int!`
  """
  originalLanguage_count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`title_count` of type `Int!`
  """
  title_count: Int_Filter
}
"""
✨ Generated key input type for table 'Movie'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Movie_Key {
  """
  ✨ Generated from Field `Movie`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Movie`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Movie'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Movie_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Movie_Filter
}
"""
✨ Generated order input type for table 'Movie'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Movie_Order {
  """
  ✨ Generated from Field `Movie`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Movie`.`description` of type `String`
  """
  description: OrderDirection
  """
  ✨ Generated from Field `Movie`.`genre` of type `String`
  """
  genre: OrderDirection
  """
  ✨ Generated from Field `Movie`.`originalLanguage` of type `Language!`
  """
  originalLanguage: OrderDirection
  """
  ✨ Generated from Field `Movie`.`title` of type `String!`
  """
  title: OrderDirection
}
